#  Temporal Asset Vault

This project is a backend system that simulates a digital asset vault.  
It uses **Temporal** for orchestrating transaction workflows, **Redis** for data storage and messaging, and a **Node.js/Express** API built with TypeScript.

---

##  Prerequisites

Before you begin, ensure you have the following installed and running:

- **Node.js:** Version `v16.20.2` or higher is recommended.  
- **Temporal Server:** The workflow engine must be running.  
- **Redis:** The Redis database server must be running.  


---

## ⚙️ Implementation Details

### 🖥️ Express.js
- Provides a RESTful API for authentication, asset management, and transaction tracking.  
- Routes under `/api` expose endpoints for `auth`, `assets`, and `transactions`.  
- Controllers handle request validation, forward commands to Temporal Workflows, and return responses.

---

### 📘 TypeScript (Required)
- Enforced project-wide via `tsconfig.json`.  
- All APIs use **DTOs (Data Transfer Objects)** for input validation.  
- **Generics, types, and enums** ensure strong typing, e.g.:
  - `enum TransactionStatus { PENDING, SUCCESS, FAILED }`
  - `type AssetSymbol = "BTC" | "ETH" | "USD"`
  - Generics used for reusable service logic.

---

### 🧰 Redis
- **Storage**: Keeps balances keyed per user, e.g. `user:{id}:balance:BTC`.  
- **Events (Pub/Sub)**: Publishes transaction events into Redis channels:
  - `auth:login:success`
  - `deposit:success`, `deposit:failed`
  - `withdraw:success`, `withdraw:failed`  

📌 **Note:** Only publishing is implemented. Consumers/listeners are **out of scope**.

---

### ⏱️ Temporal SDK (TypeScript)
- Orchestrates **deterministic transaction workflows**.  
- Implements **`ProcessTransactionWorkflow`** with built-in retries and cancellation handling.  
- Activities:
  1. `validateInputActivity` → Ensures request body is valid.  
  2. `updateBalanceActivity` → Checks/updates balance in Redis.  
  3. `publishEventActivity` → Publishes success/failure events to Redis.  
- Supports simulated **latency** (`sleep(5000)`) for long-running operations.  
- Handles **workflow retries** on transient errors.  
- Supports **workflow cancellation** for aborted transactions.

---

### Testing (Jest)
- Unit tests for services, DTOs, and workflow activities.  
- API integration tests for `/auth`, `/assets`, `/transactions`.  
- Mock Redis and Temporal for isolated tests.

---

### ESLint + Prettier
- Enforces code style consistency and catches TypeScript errors early.  
- Configured for `airbnb-base` style with TypeScript support.

---

### 📝 Audit Logs & Tracing
- Each API request and workflow execution produces structured logs.  
- Events include:
  - User logins
  - Transaction start/end
  - Workflow retries or failures  

---

###  Multi-User Support
- Authentication via **JWT tokens**.  
- User-specific balances in Redis (e.g., `user:123:balance:BTC`).  
- Prevents cross-user data leakage.
---


## Manual Local Setup

Make sure you have a local instance of the Temporal Server and Redis running.

Navigate to the project's root folder:
```bash
cd temporal-asset-vault


Install all required dependencies:
```bash
npm install

In one terminal window, start the API server:
```bash
npm run start:dev


Open a second terminal window and start the Temporal worker:
```bash
npm run worker:dev
---


## Project Structure

The project is organized with a clear separation of concerns to enhance maintainability and scalability.
```perl
temporal-asset-vault/
├── .gitignore
├── docker-compose.yml
├── Dockerfile
├── jest.config.js
├── package-lock.json
├── package.json
├── tsconfig.json
├── node_modules/       # Managed by NPM
├── dist/               # Compiled TypeScript output
└── src/                # Application source code
    ├── api/            # Express server, routes, controllers
    ├── temporal/       # Workflows, activities, and worker
    ├── services/       # Shared business logic (Redis, etc.)
    ├── config/         # Environment configuration
    ├── dtos/           # Data Transfer Objects for validation
    └── index.ts        # Main application entry point
---
## API Endpoints
All API routes are prefixed with /api.

### Authentication Routes
/auth/register	POST	Registers a new user	{ "email": "string", "password": "string" }
/auth/login	POST	Logs in a user, returns JWT	{ "email": "string", "password": "string" }

### Assets Routes

These routes require a valid JWT Bearer token in the Authorization header.

/assets	GET	Fetches all asset balances for the user	None
/assets/deposit	POST	Starts a Temporal workflow to deposit asset	{ "symbol": "string", "amount": number }
/assets/withdraw	POST	Starts a Temporal workflow to withdraw asset	{ "symbol": "string", "amount": number }

### Transaction Routes
/transactions/:workflowId	GET	Gets the current status of a transaction workflow
---

Assumbtions :

